"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _mongoose = _interopRequireDefault(require("mongoose"));
var Schema = _mongoose["default"].Schema,
  model = _mongoose["default"].model;
var clientSchema = new Schema({
  username: {
    type: String,
    required: [true, 'Please! provide firstname.']
  },
  deviceId: {
    type: String,
    unique: true,
    required: [true, 'Please! provide deviceId.']
  },
  installationDate: {
    type: String,
    required: [true, 'Please! provide Installation Date.']
  },
  paymentDate: {
    type: String,
    required: [true, 'Please! provide payment Date.']
  },
  sensor: {
    type: Number,
    "enum": [1, 2, 3, 4, 5, 6],
    required: [true, 'Please! provide number of sensor.']
  },
  battery: {
    type: Boolean,
    required: [true, 'Please! provide battery status.']
  },
  naradaTel: {
    type: String,
    unique: true,
    required: [true, 'Please! provide NaradaTel.']
  },
  phone: {
    type: String,
    required: [true, 'Please! provide client Phone .'],
    minlength: 10
  },
  monthlyInstallment: {
    type: Number,
    required: [true, 'Please! provide installment amount.']
  },
  district: {
    type: String,
    required: [true, 'Please! provide district']
  },
  sector: {
    type: String,
    required: [true, 'Please! provide sector']
  },
  cell: {
    type: String,
    required: [true, 'Please! provide cell']
  },
  nearby: {
    type: String,
    required: [true, 'Please! provide nearby place']
  },
  coordinates: {
    type: String,
    required: [true, 'Please! provide coordinates']
  }
});
var Client = model('client', clientSchema);
var _default = Client;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIlNjaGVtYSIsIm1vbmdvb3NlIiwibW9kZWwiLCJjbGllbnRTY2hlbWEiLCJ1c2VybmFtZSIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImRldmljZUlkIiwidW5pcXVlIiwiaW5zdGFsbGF0aW9uRGF0ZSIsInBheW1lbnREYXRlIiwic2Vuc29yIiwiTnVtYmVyIiwiYmF0dGVyeSIsIkJvb2xlYW4iLCJuYXJhZGFUZWwiLCJwaG9uZSIsIm1pbmxlbmd0aCIsIm1vbnRobHlJbnN0YWxsbWVudCIsImRpc3RyaWN0Iiwic2VjdG9yIiwiY2VsbCIsIm5lYXJieSIsImNvb3JkaW5hdGVzIiwiQ2xpZW50IiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVscy9jbGllbnRNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5jb25zdCB7IFNjaGVtYSwgbW9kZWwgfSA9IG1vbmdvb3NlO1xyXG5cclxuICAgIFxyXG5jb25zdCBjbGllbnRTY2hlbWEgPSBuZXcgU2NoZW1hKHtcclxuICAgIHVzZXJuYW1lOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ1BsZWFzZSEgcHJvdmlkZSBmaXJzdG5hbWUuJ11cclxuICAgICAgfSxcclxuICAgIGRldmljZUlkOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgdW5pcXVlOiB0cnVlLFxyXG4gICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgZGV2aWNlSWQuJ11cclxuICAgIH0sXHJcbiAgICBpbnN0YWxsYXRpb25EYXRlOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ1BsZWFzZSEgcHJvdmlkZSBJbnN0YWxsYXRpb24gRGF0ZS4nXVxyXG4gICAgICB9LFxyXG4gICAgICBwYXltZW50RGF0ZToge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgcGF5bWVudCBEYXRlLiddXHJcbiAgICAgIH0sXHJcbiAgICAgIHNlbnNvcjoge1xyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgICAgICBlbnVtOiBbMSwgMiwgMywgNCwgNSwgNl0sXHJcbiAgICAgICAgcmVxdWlyZWQ6IFt0cnVlICwgJ1BsZWFzZSEgcHJvdmlkZSBudW1iZXIgb2Ygc2Vuc29yLiddXHJcbiAgICAgIH0sXHJcbiAgICAgIGJhdHRlcnk6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuICxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgYmF0dGVyeSBzdGF0dXMuJ11cclxuICAgICAgfSxcclxuICAgIG5hcmFkYVRlbDoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHVuaXF1ZTogdHJ1ZSxcclxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIE5hcmFkYVRlbC4nXVxyXG4gICAgfSxcclxuICAgIHBob25lOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIGNsaWVudCBQaG9uZSAuJ10sXHJcbiAgICAgIG1pbmxlbmd0aDogMTAsXHJcbiAgICB9LFxyXG4gICAgbW9udGhseUluc3RhbGxtZW50OiB7XHJcbiAgICAgICAgdHlwZTogTnVtYmVyLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ1BsZWFzZSEgcHJvdmlkZSBpbnN0YWxsbWVudCBhbW91bnQuJ10sXHJcbiAgICAgIH0sXHJcbiAgICBcclxuICAgIGRpc3RyaWN0OiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIGRpc3RyaWN0J10sXHJcbiAgICB9LFxyXG4gICAgc2VjdG9yOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ1BsZWFzZSEgcHJvdmlkZSBzZWN0b3InXSxcclxuICAgICAgXHJcbiAgICAgIH0sXHJcbiAgICAgIGNlbGw6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIGNlbGwnXSxcclxuICAgICAgICBcclxuICAgICAgfSxcclxuICAgICAgbmVhcmJ5OiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ1BsZWFzZSEgcHJvdmlkZSBuZWFyYnkgcGxhY2UnXSxcclxuICAgICAgfSxcclxuICAgICAgY29vcmRpbmF0ZXM6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIGNvb3JkaW5hdGVzJ10sXHJcbiAgICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IENsaWVudCA9IG1vZGVsKCdjbGllbnQnLCBjbGllbnRTY2hlbWEpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2xpZW50OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQVFDLE1BQU0sR0FBWUMsb0JBQVEsQ0FBMUJELE1BQU07RUFBRUUsS0FBSyxHQUFLRCxvQkFBUSxDQUFsQkMsS0FBSztBQUdyQixJQUFNQyxZQUFZLEdBQUcsSUFBSUgsTUFBTSxDQUFDO0VBQzVCSSxRQUFRLEVBQUU7SUFDTkMsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSw0QkFBNEI7RUFDL0MsQ0FBQztFQUNIQyxRQUFRLEVBQUU7SUFDUkgsSUFBSSxFQUFFQyxNQUFNO0lBQ1pHLE1BQU0sRUFBRSxJQUFJO0lBQ1pGLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSwyQkFBMkI7RUFDOUMsQ0FBQztFQUNERyxnQkFBZ0IsRUFBRTtJQUNkTCxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLG9DQUFvQztFQUN2RCxDQUFDO0VBQ0RJLFdBQVcsRUFBRTtJQUNYTixJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLCtCQUErQjtFQUNsRCxDQUFDO0VBQ0RLLE1BQU0sRUFBRTtJQUNOUCxJQUFJLEVBQUVRLE1BQU07SUFDWixRQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEJOLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRyxtQ0FBbUM7RUFDdkQsQ0FBQztFQUNETyxPQUFPLEVBQUU7SUFDUFQsSUFBSSxFQUFFVSxPQUFPO0lBQ2JSLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxpQ0FBaUM7RUFDcEQsQ0FBQztFQUNIUyxTQUFTLEVBQUU7SUFDVFgsSUFBSSxFQUFFQyxNQUFNO0lBQ1pHLE1BQU0sRUFBRSxJQUFJO0lBQ1pGLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSw0QkFBNEI7RUFDL0MsQ0FBQztFQUNEVSxLQUFLLEVBQUU7SUFDTFosSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxnQ0FBZ0MsQ0FBQztJQUNsRFcsU0FBUyxFQUFFO0VBQ2IsQ0FBQztFQUNEQyxrQkFBa0IsRUFBRTtJQUNoQmQsSUFBSSxFQUFFUSxNQUFNO0lBQ1pOLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxxQ0FBcUM7RUFDeEQsQ0FBQztFQUVIYSxRQUFRLEVBQUU7SUFDUmYsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSwwQkFBMEI7RUFDN0MsQ0FBQztFQUNEYyxNQUFNLEVBQUU7SUFDSmhCLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsd0JBQXdCO0VBRTNDLENBQUM7RUFDRGUsSUFBSSxFQUFFO0lBQ0pqQixJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLHNCQUFzQjtFQUV6QyxDQUFDO0VBQ0RnQixNQUFNLEVBQUU7SUFDTmxCLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsOEJBQThCO0VBQ2pELENBQUM7RUFDRGlCLFdBQVcsRUFBRTtJQUNYbkIsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSw2QkFBNkI7RUFDaEQ7QUFDSixDQUFDLENBQUM7QUFFRixJQUFNa0IsTUFBTSxHQUFHdkIsS0FBSyxDQUFDLFFBQVEsRUFBRUMsWUFBWSxDQUFDO0FBQUMsSUFBQXVCLFFBQUEsR0FFaENELE1BQU07QUFBQUUsT0FBQSxjQUFBRCxRQUFBIn0=