"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _mongoose = _interopRequireDefault(require("mongoose"));
var Schema = _mongoose["default"].Schema,
  model = _mongoose["default"].model;
var clientSchema = new Schema({
  username: {
    type: String,
    required: [true, 'Please! provide firstname.']
  },
  deviceId: {
    type: String,
    required: [true, 'Please! provide deviceId.']
  },
  installationDate: {
    type: String,
    required: [true, 'Please! provide Installation Date.']
  },
  paymentDate: {
    type: String,
    required: [true, 'Please! provide payment Date.']
  },
  sensor: {
    type: Number,
    "enum": [1, 2, 3, 4, 5, 6],
    required: [true, 'Please! provide number of sensor.']
  },
  battery: {
    type: Boolean,
    required: [true, 'Please! provide battery status.']
  },
  naradaTel: {
    type: String,
    unique: true,
    required: [true, 'Please! provide NaradaTel.']
  },
  phone: {
    type: String,
    required: [true, 'Please! provide client Phone .'],
    minlength: 10
  },
  price: {
    type: Number,
    required: [true, 'Please! provide price.']
  },
  district: {
    type: String,
    required: [true, 'Please! provide district']
  },
  sector: {
    type: String,
    required: [true, 'Please! provide sector']
  },
  cell: {
    type: String,
    required: [true, 'Please! provide cell']
  },
  nearby: {
    type: String,
    required: [true, 'Please! provide nearby place']
  },
  coordinates: {
    type: String,
    required: [true, 'Please! provide coordinates']
  }
});
var Client = model('client', clientSchema);
var _default = Client;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbW9uZ29vc2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIlNjaGVtYSIsIm1vbmdvb3NlIiwibW9kZWwiLCJjbGllbnRTY2hlbWEiLCJ1c2VybmFtZSIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImRldmljZUlkIiwiaW5zdGFsbGF0aW9uRGF0ZSIsInBheW1lbnREYXRlIiwic2Vuc29yIiwiTnVtYmVyIiwiYmF0dGVyeSIsIkJvb2xlYW4iLCJuYXJhZGFUZWwiLCJ1bmlxdWUiLCJwaG9uZSIsIm1pbmxlbmd0aCIsInByaWNlIiwiZGlzdHJpY3QiLCJzZWN0b3IiLCJjZWxsIiwibmVhcmJ5IiwiY29vcmRpbmF0ZXMiLCJDbGllbnQiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL2NsaWVudE1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb25nb29zZSBmcm9tICdtb25nb29zZSc7XHJcbmNvbnN0IHsgU2NoZW1hLCBtb2RlbCB9ID0gbW9uZ29vc2U7XHJcblxyXG4gICAgXHJcbmNvbnN0IGNsaWVudFNjaGVtYSA9IG5ldyBTY2hlbWEoe1xyXG4gICAgdXNlcm5hbWU6IHtcclxuICAgICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIGZpcnN0bmFtZS4nXVxyXG4gICAgICB9LFxyXG4gICAgZGV2aWNlSWQ6IHtcclxuICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgZGV2aWNlSWQuJ11cclxuICAgIH0sXHJcbiAgICBpbnN0YWxsYXRpb25EYXRlOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ1BsZWFzZSEgcHJvdmlkZSBJbnN0YWxsYXRpb24gRGF0ZS4nXVxyXG4gICAgICB9LFxyXG4gICAgICBwYXltZW50RGF0ZToge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgcGF5bWVudCBEYXRlLiddXHJcbiAgICAgIH0sXHJcbiAgICAgIHNlbnNvcjoge1xyXG4gICAgICAgIHR5cGU6IE51bWJlcixcclxuICAgICAgICBlbnVtOiBbMSwgMiwgMywgNCwgNSwgNl0sXHJcbiAgICAgICAgcmVxdWlyZWQ6IFt0cnVlICwgJ1BsZWFzZSEgcHJvdmlkZSBudW1iZXIgb2Ygc2Vuc29yLiddXHJcbiAgICAgIH0sXHJcbiAgICAgIGJhdHRlcnk6IHtcclxuICAgICAgICB0eXBlOiBCb29sZWFuICxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgYmF0dGVyeSBzdGF0dXMuJ11cclxuICAgICAgfSxcclxuICAgIG5hcmFkYVRlbDoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHVuaXF1ZTogdHJ1ZSxcclxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIE5hcmFkYVRlbC4nXVxyXG4gICAgfSxcclxuICAgIHBob25lOiB7XHJcbiAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIGNsaWVudCBQaG9uZSAuJ10sXHJcbiAgICAgIG1pbmxlbmd0aDogMTAsXHJcbiAgICB9LFxyXG4gICAgcHJpY2U6IHtcclxuICAgICAgICB0eXBlOiBOdW1iZXIsXHJcbiAgICAgICAgcmVxdWlyZWQ6IFt0cnVlLCAnUGxlYXNlISBwcm92aWRlIHByaWNlLiddLFxyXG4gICAgICB9LFxyXG4gICAgXHJcbiAgICBkaXN0cmljdDoge1xyXG4gICAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ1BsZWFzZSEgcHJvdmlkZSBkaXN0cmljdCddLFxyXG4gICAgfSxcclxuICAgIHNlY3Rvcjoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgc2VjdG9yJ10sXHJcbiAgICAgIFxyXG4gICAgICB9LFxyXG4gICAgICBjZWxsOiB7XHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIHJlcXVpcmVkOiBbdHJ1ZSwgJ1BsZWFzZSEgcHJvdmlkZSBjZWxsJ10sXHJcbiAgICAgICAgXHJcbiAgICAgIH0sXHJcbiAgICAgIG5lYXJieToge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgbmVhcmJ5IHBsYWNlJ10sXHJcbiAgICAgICAgXHJcbiAgICAgIFxyXG4gICAgICB9LFxyXG4gICAgICBjb29yZGluYXRlczoge1xyXG4gICAgICAgIHR5cGU6IFN0cmluZyxcclxuICAgICAgICByZXF1aXJlZDogW3RydWUsICdQbGVhc2UhIHByb3ZpZGUgY29vcmRpbmF0ZXMnXSxcclxuICAgICAgICBcclxuICAgICAgXHJcbiAgICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIGNvbnN0IENsaWVudCA9IG1vZGVsKCdjbGllbnQnLCBjbGllbnRTY2hlbWEpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ2xpZW50OyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQVFDLE1BQU0sR0FBWUMsb0JBQVEsQ0FBMUJELE1BQU07RUFBRUUsS0FBSyxHQUFLRCxvQkFBUSxDQUFsQkMsS0FBSztBQUdyQixJQUFNQyxZQUFZLEdBQUcsSUFBSUgsTUFBTSxDQUFDO0VBQzVCSSxRQUFRLEVBQUU7SUFDTkMsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSw0QkFBNEI7RUFDL0MsQ0FBQztFQUNIQyxRQUFRLEVBQUU7SUFDUkgsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSwyQkFBMkI7RUFDOUMsQ0FBQztFQUNERSxnQkFBZ0IsRUFBRTtJQUNkSixJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLG9DQUFvQztFQUN2RCxDQUFDO0VBQ0RHLFdBQVcsRUFBRTtJQUNYTCxJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLCtCQUErQjtFQUNsRCxDQUFDO0VBQ0RJLE1BQU0sRUFBRTtJQUNOTixJQUFJLEVBQUVPLE1BQU07SUFDWixRQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDeEJMLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRyxtQ0FBbUM7RUFDdkQsQ0FBQztFQUNETSxPQUFPLEVBQUU7SUFDUFIsSUFBSSxFQUFFUyxPQUFPO0lBQ2JQLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxpQ0FBaUM7RUFDcEQsQ0FBQztFQUNIUSxTQUFTLEVBQUU7SUFDVFYsSUFBSSxFQUFFQyxNQUFNO0lBQ1pVLE1BQU0sRUFBRSxJQUFJO0lBQ1pULFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSw0QkFBNEI7RUFDL0MsQ0FBQztFQUNEVSxLQUFLLEVBQUU7SUFDTFosSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSxnQ0FBZ0MsQ0FBQztJQUNsRFcsU0FBUyxFQUFFO0VBQ2IsQ0FBQztFQUNEQyxLQUFLLEVBQUU7SUFDSGQsSUFBSSxFQUFFTyxNQUFNO0lBQ1pMLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSx3QkFBd0I7RUFDM0MsQ0FBQztFQUVIYSxRQUFRLEVBQUU7SUFDUmYsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSwwQkFBMEI7RUFDN0MsQ0FBQztFQUNEYyxNQUFNLEVBQUU7SUFDSmhCLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsd0JBQXdCO0VBRTNDLENBQUM7RUFDRGUsSUFBSSxFQUFFO0lBQ0pqQixJQUFJLEVBQUVDLE1BQU07SUFDWkMsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLHNCQUFzQjtFQUV6QyxDQUFDO0VBQ0RnQixNQUFNLEVBQUU7SUFDTmxCLElBQUksRUFBRUMsTUFBTTtJQUNaQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsOEJBQThCO0VBR2pELENBQUM7RUFDRGlCLFdBQVcsRUFBRTtJQUNYbkIsSUFBSSxFQUFFQyxNQUFNO0lBQ1pDLFFBQVEsRUFBRSxDQUFDLElBQUksRUFBRSw2QkFBNkI7RUFHaEQ7QUFDSixDQUFDLENBQUM7QUFFRixJQUFNa0IsTUFBTSxHQUFHdkIsS0FBSyxDQUFDLFFBQVEsRUFBRUMsWUFBWSxDQUFDO0FBQUMsSUFBQXVCLFFBQUEsR0FFaENELE1BQU07QUFBQUUsT0FBQSxjQUFBRCxRQUFBIn0=